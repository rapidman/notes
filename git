1) Create a branch with the tag
	git branch {tagname}-branch {tagname}
	git checkout {tagname}-branch

2) Include the fix manually if it's just a change .... 
	git add .
	git ci -m "Fix included"
    or cherry-pick the commit, whatever is easier
	git cherry-pick  {num_commit}
	
3) Delete and recreate the tag locally
	git tag -d {tagname}
	git tag {tagname}

4) Delete and recreate the tag remotely
	git push origin :{tagname} // deletes original remote tag
	git push origin {tagname} // creates new remote tag

This is based on https://gist.github.com/739288 thanks to nickfloyd for it

//create branch from tag
git checkout -b [new branch name] [tag name]

//force pull
git fetch origin master
git reset --hard FETCH_HEAD
git clean -df

//drop latest commit
git reset --hard HEAD~1
git push origin HEAD --force

//sync local repo with remote one
git fetch --prune

git remote prune origin

//git rebase
https://about.gitlab.com/2018/06/07/keeping-git-commit-history-clean/


Что делать, если всё пошло не так?

Методика, которую мы сейчас обсудим, помогает в ситуациях, когда всё идёт не так, как надо. Например, такое происходит, когда вы слишком увлекаетесь копированием готовых решений со StackOverflow, и, после работы, ваш репозиторий оказывается в худшем состоянии чем он был в самом начале. В такую ситуацию, пожалуй, попадали все мы.

Команда git reflog показывает список всего, что вы сделали. Затем она позволяет воспользоваться инструментами Git для отката изменений, для возврата к одному из прошлых состояний репозитория. Стоит отметить, что этот метод стоит рассматривать как последнее средство, и, прежде чем им воспользоваться, стоит как следует подумать. Итак, вывести список того, что было сделано, можно следующей командой:

git reflog

Git помнит все наши действия и в результате выполнения этой команд можно увидеть примерно следующее:

3ff8691 (HEAD -> feature-branch) HEAD@{0}: Branch: renamed refs/heads/feature-brunch to refs/heads/feature-branch
3ff8691 (HEAD -> feature-branch) HEAD@{2}: checkout: moving from master to feature-brunch
2b7e508 (master) HEAD@{3}: reset: moving to HEAD~
3ff8691 (HEAD -> feature-branch) HEAD@{4}: commit: Adds the client logo
2b7e508 (master) HEAD@{5}: reset: moving to HEAD~1
37a632d HEAD@{6}: commit: Adds the client logo to the project
2b7e508 (master) HEAD@{7}: reset: moving to HEAD
2b7e508 (master) HEAD@{8}: commit (amend): Added contributing info to the site
dfa27a2 HEAD@{9}: reset: moving to HEAD
dfa27a2 HEAD@{10}: commit (amend): Added contributing info to the site
700d0b5 HEAD@{11}: commit: Addded contributing info to the site
efba795 HEAD@{12}: commit (initial): Initial commit

Обратите внимание на самую левую колонку этого списка. Тут содержатся индексы. Если вам нужно вернуться назад, в некий момент прошлого, выполните следующую команду, заменив {index} соответствующей ссылкой, например — dfa27a2. Выглядит эта команда так:

git reset HEAD@{index}

//find branch creator
git for-each-ref --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p)    %(align:25,left)%(color:yellow)%(authorname)%(end) %(color:reset)%(refname:strip=3)' --sort=authordate refs/remotes

//batch delete branches
git branch -r --merged|egrep -v "msb_gitlab|release|dev|master"| sed 's/origin\///'| xargs -n 1 git push --delete origin



Пример работы с ветками в Git.

1. На разработчика назначают задачу http://youtrack.azoft.azoft.com/issue/[issue ID],
например речь идет о добавлении новой фичи “Реализовать просмотр акций клиента”.

2. Разработчик создает новый бранч локально и затем пушит его в origin (в удаленный репозиторий). Для наименования ветки использовать паттерн “feature-{issueId}” где issueId это номер тикета из youtrack.

git checkout -b feature-777 develop

git push -u origin feature-777

3. Разработчик проводит работу, периодически пушит изменения в
origin/feature-777
для того чтобы код можно было ревьюить.

4. После завершения работы, разработчик пушит свои изменения в бранч origin/feature-777 	и в комментах указывает refs#{ticket ID} где ticket ID это ИД тикета из youtrack к которому относятся эти изменения (используется для интеграции youtrack и git). После того как задачу аппрувит Тимлид, разработчик вливает свои изменения в ветку develop.

git checkout develop //переключаемся на локальную ветку develop отслеживающую удаленную origin/develop (не забываем ее обновить перед этим)

git merge --no-ff  feature-777 //мержим ее с нашей локальной веткой

git push origin develop //сохраняем изменения на удаленную ветку develop

git branch -d feature-777 //удаляем локальную ветку

git push origin :feature-777 //удаляем удаленную ветку

unix2dos $file  //заменяет LF на CLRF

--------------------------------------------------------------------
//Remove whitespace changes, then `git add -p`
git diff -w --no-color | git apply --cached --ignore-whitespace && git checkout -- . && git reset && git add -p
Bash
git diff -w --no-color creates a diff

git apply --cached --ignore-whitespace applies the diff ignoring whitepace, and indexes it

git checkout — . removes the unindexed “whitespace” changes

git reset resets the index to just he non-whitespace cahnges

git add -p adds the non-whitespace changes in patch mode

We did this with it alias gwap=“git diff -w --no-color | git apply --cached --ignore-whitespace && git checkout -- . && git reset && git add -p”


Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem. You can turn on this functionality with the core.autocrlf setting. If you’re on a Windows machine, set it to true – this converts LF endings into CRLF when you check out code:

$ git config --global core.autocrlf true
If you’re on a Linux or Mac system that uses LF line endings, then you don’t want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it. You can tell Git to convert CRLF to LF on commit but not the other way around by setting core.autocrlf to input:

$ git config --global core.autocrlf input
This setup should leave you with CRLF endings in Windows checkouts, but LF endings on Mac and Linux systems and in the repository.

If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to false:

$ git config --global core.autocrlf false
----------------------------------------------------
